/*
    SPDX-License-Identifier: AGPL-3.0-or-later
    SPDX-FileCopyrightText: 2025 Shomy
*/
pub mod carbonara;
use crate::connection::port::ConnectionType;
use crate::da::protocol::DAProtocol;

pub enum BootStage {
    Brom,
    Preloader,
    Da1,
    Da2,
}

pub struct ExploitMeta {
    pub name: String,
    pub boot_mode: Vec<ConnectionType>, // In which mode the exploit works (BROM, Preloader, DA)
    pub boot_stage: BootStage,          /* In which stage the exploit works. (e.g. Kamakiri runs
                                         * in BROM, Carbonara in DA1) */
}

#[async_trait::async_trait]
pub trait Exploit {
    async fn run<T: DAProtocol + Send>(&mut self, protocol: &mut T) -> Result<bool, String>;

    fn get_meta(&self) -> &ExploitMeta;
}
