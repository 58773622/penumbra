use crate::connection::{ConnectionType, Connection};
use crate::exploit::{BootStage, Exploit, ExploitMeta};
use crate::da::DA;
use sha2::{Sha256, Digest};


pub struct Carbonara {
    meta: ExploitMeta,
    da: DA,
    conn: Connection,
    protocol: 
}


impl Carbonara {
    pub fn new(da: DA) -> Self {
        Carbonara {
            meta: ExploitMeta {
                name: String::from("Carbonara"),
                boot_mode: vec![ConnectionType::Brom, ConnectionType::Preloader],
                boot_stage: BootStage::Da1,
            },
            da,
        }
    }

    fn is_vulnerable(&self) -> bool {
        let tests: [&[u8], 3] = [
            b"\x01\x01\x54\xE3\x01\x14\xA0\xE3",
            b"\x08\x00\xa8\x52\xff\x02\x08\xeb",
            b"\x06\x9B\x4F\xF0\x80\x40\x02\xA9",
        ];

        for pattern in tests.iter() {
            if self.da.get_da1().unwrap().data.windows(pattern.len()).any(|w| w == *pattern) {
                return false;
            }
        }

        true
    }
}

impl Exploit for Carbonara {
    fn run(&mut self) -> Result<bool, String> {
        Ok(true)
    }

    fn get_meta(&self) -> &ExploitMeta {
        &self.meta
    }
}